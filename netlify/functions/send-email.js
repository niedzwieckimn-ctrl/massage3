// netlify/functions/send-email.jsconst cors = {  'Access-Control-Allow-Origin': '*',  'Access-Control-Allow-Methods': 'POST,OPTIONS',  'Access-Control-Allow-Headers': 'Content-Type',};
function json(data, status = 200) {  return new Response(JSON.stringify(data), {    status,    headers: { 'content-type': 'application/json', ...cors },  });}
export default async (request, context) => {  try {    if (request.method === 'OPTIONS') return new Response(null, { status: 204, headers: cors });    if (request.method !== 'POST') return json({ error: 'Method not allowed' }, 405);
    // ENV kompatybilnie: Netlify Functions (context.env) i Node (process.env)    const ENV = (context && context.env) ? context.env : (typeof process !== 'undefined' ? process.env : {});    const RESEND_API_KEY = ENV.RESEND_API_KEY;    const FROM_EMAIL = ENV.FROM_EMAIL || 'onboarding@resend.dev';    const ADMIN_EMAIL = ENV.ADMIN_EMAIL || '';
    if (!RESEND_API_KEY) return json({ ok: false, error: 'Missing RESEND_API_KEY' }, 500);
    // Body    let body = {};    try { body = JSON.parse(await request.text() || '{}'); } catch { return json({ ok:false, error:'Invalid JSON' }, 400); }
    // --- ŚCIEŻKA 1: stary payload { to, subject, html } ---    if (body && typeof body.subject === 'string' && typeof body.html === 'string' && ('to' in body)) {      const to = Array.isArray(body.to) ? body.to : [body.to];      if (!to || !to.length || !to[0]) return json({ ok:false, error:'Missing "to"' }, 400);
      const resp = await fetch('https://api.resend.com/emails', {        method: 'POST',        headers: { Authorization: `Bearer ${RESEND_API_KEY}`, 'Content-Type': 'application/json' },        body: JSON.stringify({ from: FROM_EMAIL, to, subject: body.subject, html: body.html }),      });
      const txt = await resp.text();      if (!resp.ok) return json({ ok:false, status: resp.status, error: txt }, 502);      return json({ ok: true }, 200);    }
    // --- ŚCIEŻKA 2: nowy payload { reservation } ---    if (body && body.reservation && typeof body.reservation === 'object') {      if (!ADMIN_EMAIL) return json({ ok:false, error:'Missing ADMIN_EMAIL' }, 500);
      const r = body.reservation || {};      const subject = `NOWA REZERWACJA #${r.id || ''} — ${r.service || 'Zabieg'} — ${r.date || ''} ${r.time || ''}`.trim();
      const esc = (s='') => String(s).replace(/[<>&"]/g, c => ({'<':'&lt;','>':'&gt;','&':'&amp;','"':'&quot;'}[c]));      const html = `        <div style="font-family:Arial,Helvetica,sans-serif;line-height:1.5;color:#111">          <h3 style="margin:0 0 16px">Nowa rezerwacja</h3>          <table style="border-collapse:collapse;width:100%;max-width:640px">            <tbody>              <tr><td style="padding:8px;border-bottom:1px solid #eee;width:220px"><strong>Nr rezerwacji</strong></td><td style="padding:8px;border-bottom:1px solid #eee">${esc(r.id || '-')}</td></tr>              <tr><td style="padding:8px;border-bottom:1px solid #eee"><strong>Imię i nazwisko</strong></td><td style="padding:8px;border-bottom:1px solid #eee">${esc(r.client?.name || '-')}</td></tr>              <tr><td style="padding:8px;border-bottom:1px solid #eee"><strong>Adres</strong></td><td style="padding:8px;border-bottom:1px solid #eee">${esc(r.client?.address || '-')}</td></tr>              <tr><td style="padding:8px;border-bottom:1px solid #eee"><strong>Nr telefonu</strong></td><td style="padding:8px;border-bottom:1px solid #eee">${esc(r.client?.phone || '-')}</td></tr>              <tr><td style="padding:8px;border-bottom:1px solid #eee"><strong>Email klienta</strong></td><td style="padding:8px;border-bottom:1px solid #eee">${esc(r.client?.email || '-')}</td></tr>              <tr><td style="padding:8px;border-bottom:1px solid #eee"><strong>Nazwa zabiegu</strong></td><td style="padding:8px;border-bottom:1px solid #eee">${esc(r.service || '-')}</td></tr>              <tr><td style="padding:8px;border-bottom:1px solid #eee"><strong>Data i godzina</strong></td><td style="padding:8px;border-bottom:1px solid #eee">${esc(r.date || '-')} ${esc(r.time || '')}</td></tr>              <tr><td style="padding:8px;border-bottom:1px solid #eee"><strong>Uwagi</strong></td><td style="padding:8px;border-bottom:1px solid #eee">${esc(r.notes || '-')}</td></tr>            </tbody>          </table>        </div>      `;
      const resp = await fetch('https://api.resend.com/emails', {        method: 'POST',        headers: { Authorization: `Bearer ${RESEND_API_KEY}`, 'Content-Type': 'application/json' },        body: JSON.stringify({ from: FROM_EMAIL, to: [ADMIN_EMAIL], subject, html }),      });
      const txt = await resp.text();      if (!resp.ok) return json({ ok:false, status: resp.status, error: txt }, 502);      return json({ ok: true }, 200);    }
    // Nic nie pasuje    return json({ ok:false, error:'Unsupported payload. Send {to,subject,html} or {reservation}.' }, 400);  } catch (e) {    return json({ ok:false, error: 'Server error', detail: String(e) }, 500);  }};